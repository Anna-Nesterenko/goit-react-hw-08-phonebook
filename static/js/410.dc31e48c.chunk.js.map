{"version":3,"file":"static/js/410.dc31e48c.chunk.js","mappings":"0TAEaA,EAAcC,EAAAA,GAAAA,GAAH,4CAIXC,EAAiBD,EAAAA,GAAAA,IAAH,gUAcdE,EAAaF,EAAAA,GAAAA,MAAH,+VAiBVG,EAAWH,EAAAA,GAAAA,IAAH,mEAKRI,EAAcJ,EAAAA,GAAAA,IAAH,mEAKXK,EAAaL,EAAAA,GAAAA,IAAH,gLAUVM,EAAYN,EAAAA,GAAAA,KAAH,mHAOTO,EAAaP,EAAAA,GAAAA,IAAH,6CAIVQ,EAAgBR,EAAAA,GAAAA,KAAH,+G,SCmE1B,I,IAAA,EAxHA,WACE,OAA0BS,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,UAAS,CACrCG,KAAM,GACNC,OAAO,IAFT,eAAOC,EAAP,KAAgBC,EAAhB,KAsCMC,EAAM,mCAAG,WAAMC,GAAN,oEACK,UAAdA,EAAMC,IADG,uBAEXD,EAAME,iBACNR,EAAS,IACTI,GAAW,UAAKD,IACA,kDACD,mCANJ,SAQLM,IAAAA,IAHU,kDAIA,CACZC,OAAQ,CACNC,EAAGZ,EACHa,MAAO,SACPC,MAPS,sCAUZC,MAAK,SAAAC,GACJX,EAAW,CAAEH,KAAMc,EAAId,KAAMC,OAAO,OAErCc,OAAM,SAAAd,GACLE,GAAW,kBAAKD,GAAN,IAAeF,KAAM,GAAIC,OAAO,KAC1CF,EAAS,IACTiB,QAAQC,IAAIhB,EAAMiB,YAtBX,2CAAH,sDA2BZ,OACE,UAAC7B,EAAD,YACE,UAACF,EAAD,uBACU,iDAEV,0BACE,SAACG,EAAD,CACE6B,WAAS,EACTC,KAAK,OACLC,YAAY,gBACZC,KAAK,QACLC,MAAOzB,EACP0B,SAAU,SAAAnB,GAAK,OAAIN,EAASM,EAAMoB,OAAOF,QACzCG,WAAYtB,MAIfF,EAAQD,QACP,+BACE,SAACL,EAAD,WACE,iBAAM+B,MAAO,CAAEC,SAAU,QAAzB,wCAKL1B,GAAWA,EAAQF,MAAQE,EAAQF,KAAK6B,OACvC,4BACE,SAACtC,EAAD,WACE,0BACGW,EAAQF,KAAKsB,KADhB,MACuB,0BAAOpB,EAAQF,KAAK8B,IAAIC,gBAGjD,SAACvC,EAAD,WACE,0BA7FK,WACb,IAyBMwC,EAAc,IAAIC,KAIxB,MAHU,UAXG,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAImBD,EAAYE,UAAvB,aAAqCF,EAAYG,UAAjD,YA1BK,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAeOH,EAAYI,aAiENC,QAET,UAAC5C,EAAD,YACE,gBACE6C,IAAG,4CAAuCpC,EAAQF,KAAKE,QAAQ,GAAGqC,KAA/D,WACHC,IAAKtC,EAAQF,KAAKE,QAAQ,GAAGuC,cAE9BC,KAAKC,MAAMzC,EAAQF,KAAK6B,KAAKe,OAC9B,SAAClD,EAAD,0BAEF,UAACC,EAAD,YACE,uBAAIO,EAAQF,KAAKE,QAAQ,GAAGuC,YAAYI,iBACxC,wCAAgB3C,EAAQF,KAAK8C,KAAKC,MAAlC,mBC5HCC,EAAY5D,EAAAA,GAAAA,EAAH,8NAWT6D,EAAkB7D,EAAAA,GAAAA,IAAH,iKCI5B,EAdiB,WACf,OACE,UAAC6D,EAAD,YACE,SAACC,EAAA,EAAD,KACA,SAAC,EAAD,KACA,SAACF,EAAD","sources":["components/WeatherApp/WeatherApp.styled.js","components/WeatherApp/WeatherApp.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const WeatherName = styled.h1`\n  font-size: 2rem;\n`;\n\nexport const WeatherWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 450px;\n  background-color: rgba(226, 226, 226, 0.2);\n  text-align: center;\n  box-shadow: rgb(33 33 33) 0px 2px 10px 1px;\n  padding: 20px;\n  @media screen and (max-width: 750px) {\n    padding: 15px;\n  }\n`;\n\nexport const CitySearch = styled.input`\n  width: 200px;\n  box-sizing: border-box;\n  border: 2px solid #ccc;\n  outline: none;\n  border-radius: 20px;\n  font-size: 16px;\n  margin-bottom: 10px;\n  background-color: white;\n  background-position: 10px 10px;\n  padding: 12px 20px 12px 40px;\n  transition: width 0.4s ease-in-out;\n  &:focus {\n    width: 60%;\n  }\n`;\n\nexport const CityName = styled.div`\n  margin-top: 10px;\n  font-size: 1.25em;\n`;\n\nexport const DateWrapper = styled.div`\n  font-size: 1.25em;\n  font-weight: 600;\n`;\n\nexport const IconStyled = styled.div`\n  font-size: 4rem;\n  font-weight: 700;\n  color: #1e2432;\n  text-align: center;\n  @media screen and (max-width: 750px) {\n    font-size: 3rem;\n  }\n`;\n\nexport const DegStyled = styled.span`\n  font-size: 3rem;\n  @media screen and (max-width: 750px) {\n    font-size: 2.5rem;\n  }\n`;\n\nexport const WindStyled = styled.div`\n  font-weight: 600;\n`;\n\nexport const ErroreMessage = styled.span`\n  display: block;\n  text-align: center;\n  color: rgb(20, 2, 2);\n  font-size: 30px;\n`;\n","import { useState } from 'react';\nimport axios from 'axios';\n\nimport {\n  CityName,\n  CitySearch,\n  WeatherName,\n  WeatherWrapper,\n  DateWrapper,\n  IconStyled,\n  DegStyled,\n  ErroreMessage,\n  WindStyled,\n} from './WeatherApp.styled';\n\nfunction Weather() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({\n    data: {},\n    error: false,\n  });\n\n  const toDate = () => {\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n\n    const currentDate = new Date();\n    const date = `${days[currentDate.getDay()]}, ${currentDate.getDate()} ${\n      months[currentDate.getMonth()]\n    }`;\n    return date;\n  };\n\n  const search = async event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setQuery('');\n      setWeather({ ...weather });\n      const baseUrl = 'https://api.openweathermap.org/data/2.5/weather';\n      const apiKey = 'f00c38e0279b7bc85480c3fe775d518c';\n\n      await axios\n        .get(baseUrl, {\n          params: {\n            q: query,\n            units: 'metric',\n            appid: apiKey,\n          },\n        })\n        .then(res => {\n          setWeather({ data: res.data, error: false });\n        })\n        .catch(error => {\n          setWeather({ ...weather, data: {}, error: true });\n          setQuery('');\n          console.log(error.message);\n        });\n    }\n  };\n\n  return (\n    <WeatherWrapper>\n      <WeatherName>\n        Weather <span> ðŸŒ¤ </span>\n      </WeatherName>\n      <div>\n        <CitySearch\n          autoFocus\n          type=\"text\"\n          placeholder=\"Search City..\"\n          name=\"query\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n          onKeyPress={search}\n        />\n      </div>\n\n      {weather.error && (\n        <>\n          <ErroreMessage>\n            <span style={{ fontSize: '26px' }}> Sorry, City not found</span>\n          </ErroreMessage>\n        </>\n      )}\n\n      {weather && weather.data && weather.data.main && (\n        <div>\n          <CityName>\n            <h2>\n              {weather.data.name}, <span>{weather.data.sys.country}</span>\n            </h2>\n          </CityName>\n          <DateWrapper>\n            <span>{toDate()}</span>\n          </DateWrapper>\n          <IconStyled>\n            <img\n              src={`https://openweathermap.org/img/wn/${weather.data.weather[0].icon}@2x.png`}\n              alt={weather.data.weather[0].description}\n            />\n            {Math.round(weather.data.main.temp)}\n            <DegStyled> &deg;C </DegStyled>\n          </IconStyled>\n          <WindStyled>\n            <p>{weather.data.weather[0].description.toUpperCase()}</p>\n            <p>Wind Speed: {weather.data.wind.speed}m/s</p>\n          </WindStyled>\n        </div>\n      )}\n    </WeatherWrapper>\n  );\n}\n\nexport default Weather;\n","import styled from 'styled-components';\n// import { Link } from 'react-router-dom';\n\nexport const HomeTitle = styled.p`\n  max-width: 400px;\n  padding-left: 15px;\n  font-size: 32px;\n  font-weight: 700;\n  margin-top: 30px;\n  text-align: center;\n  @media screen and (max-width: 550px) {\n    font-size: 26px;\n  }\n`;\nexport const WrapperHomePage = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  padding: 40px;\n  @media screen and (max-width: 550px) {\n    padding: 25px;\n  }\n`;\n","import ParticlesLines from 'components/ParticlesLines/ParticlesLines';\nimport Weather from 'components/WeatherApp/WeatherApp';\nimport { HomeTitle, WrapperHomePage } from './HomePage.styled';\n\nconst HomePage = () => {\n  return (\n    <WrapperHomePage>\n      <ParticlesLines />\n      <Weather />\n      <HomeTitle>\n        Hello, this is your PhoneBook. It is designed to help your brain not\n        remember numbers, but write them down. Create your own unique account\n        and get the opportunity to record your contacts.\n      </HomeTitle>\n    </WrapperHomePage>\n  );\n};\n\nexport default HomePage;\n"],"names":["WeatherName","styled","WeatherWrapper","CitySearch","CityName","DateWrapper","IconStyled","DegStyled","WindStyled","ErroreMessage","useState","query","setQuery","data","error","weather","setWeather","search","event","key","preventDefault","axios","params","q","units","appid","then","res","catch","console","log","message","autoFocus","type","placeholder","name","value","onChange","target","onKeyPress","style","fontSize","main","sys","country","currentDate","Date","getDay","getDate","getMonth","toDate","src","icon","alt","description","Math","round","temp","toUpperCase","wind","speed","HomeTitle","WrapperHomePage","ParticlesLines"],"sourceRoot":""}